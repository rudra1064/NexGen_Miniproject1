{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "671ced7a-031e-48db-bec6-7a66c7c2dbc8",
   "metadata": {},
   "source": [
    "# Mini Project on Descriptive Analytics using file handling \n",
    "\n",
    "1. **Descriptive Analysis**\n",
    "\n",
    "`Analyze the distribution of movie ratings. What percentage of movies have high (5), medium (3-4), and low (1-2) ratings?`\n",
    "\n",
    "`Identify the top 10 most-rated movies`\n",
    "\n",
    "\n",
    "2. **Genre Insights**\n",
    "\n",
    "`Which movie genres are the most frequently rated?`\n",
    "\n",
    "`Compare the average ratings across different genres. Are certain genres consistently rated higher or lower?`\n",
    "\n",
    "3. **User Engagement Analysis**\n",
    "\n",
    "`Identify the most active users (profession) based on the number of ratings theyâ€™ve given.`\n",
    "\n",
    "`Analyze the relationship between user demographic attributes (age, gender, occupation) and their movie preferences or rating patterns.`\n",
    "\n",
    "\n",
    "4. **Rating Distribution by Demographics**\n",
    "\n",
    "`Investigate how ratings vary by user demographic attributes (age, gender, occupation).`\n",
    "\n",
    "`Are there specific genres preferred by certain age groups or occupations?`\n",
    "\n",
    "\n",
    "5. **Top Performers**\n",
    "\n",
    "`Identify the movies with the highest average ratings (considering a minimum number of ratings for fairness).`\n",
    "\n",
    "`Analyze the characteristics of top-rated movies (e.g., release year, genres).`\n",
    "\n",
    "\n",
    "6. **Exploring Long Tail**\n",
    "\n",
    "`Investigate the \"long tail\" of the dataset: How many movies receive very few ratings?`\n",
    "\n",
    "`What are the characteristics of these less-rated movies compared to popular ones?`\n",
    "\n",
    "\n",
    "7. **Tag Analysis**\n",
    "\n",
    "`Analyze the tags associated with movies. What are the most frequently used tags?`\n",
    "\n",
    "`Are tags consistent with movie genres?`\n",
    "\n",
    "## You can do for self learning\n",
    "\n",
    "8. **Visualization Projects**\n",
    "\n",
    "`Create dashboards to visualize:`\n",
    "\n",
    "`The distribution of ratings by genres and years.`\n",
    "\n",
    "`Popular genres by user demographics.`\n",
    "\n",
    "`Heatmaps showing the correlation between genres, user activity, and ratings`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fa18638c-ac35-4b2d-b9be-44145677f98c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High : 22\n",
      "Medium : 61\n",
      "Low : 16\n",
      "American Beauty (1999)  :  3428\n",
      "Star Wars: Episode IV - A New Hope (1977)  :  2991\n",
      "Star Wars: Episode V - The Empire Strikes Back (1980)  :  2990\n",
      "Star Wars: Episode VI - Return of the Jedi (1983)  :  2883\n",
      "Jurassic Park (1993)  :  2672\n",
      "Saving Private Ryan (1998)  :  2653\n",
      "Terminator 2: Judgment Day (1991)  :  2649\n",
      "Matrix, The (1999)  :  2590\n",
      "Back to the Future (1985)  :  2583\n",
      "Silence of the Lambs, The (1991)  :  2578\n"
     ]
    }
   ],
   "source": [
    "# First Solution - Descriptive Analysys\n",
    "\n",
    "ratings = open(r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\")\n",
    "rating_distribution = dict()\n",
    "movieId_count = dict()\n",
    "\n",
    "for line in ratings:\n",
    "    line = line.strip()\n",
    "    columns = list(map(int, line.split('::')))\n",
    "    if columns[2] == 5:\n",
    "        columns.append('High')\n",
    "    elif columns[2] == 4 or columns[2] == 3:\n",
    "        columns.append('Medium')\n",
    "    else:\n",
    "        columns.append('Low')\n",
    "\n",
    "    if columns[1] in movieId_count:\n",
    "        movieId_count[columns[1]] += 1\n",
    "    else: \n",
    "        movieId_count[columns[1]] = 1\n",
    "\n",
    "    if columns[4] in rating_distribution:\n",
    "        rating_distribution[columns[4]] += 1\n",
    "    else:\n",
    "        rating_distribution[columns[4]] = 1\n",
    "\n",
    "for rating_range in rating_distribution:\n",
    "    print('{0} : {1}'.format(rating_range, int(rating_distribution[rating_range] / sum(rating_distribution.values()) * 100)))\n",
    "\n",
    "movies = open(r\"C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat\")\n",
    "movieId_name = dict()\n",
    "for line in movies:\n",
    "    line = line.strip()\n",
    "    columns = line.split('::')\n",
    "    movieId_name[int(columns[0])] = columns[1]\n",
    "    \n",
    "sorted_counted_data = sorted(movieId_count.items(), key = lambda x:x[1], reverse=True)[:10]\n",
    "for movieId, count in sorted_counted_data:\n",
    "    print(movieId_name[movieId],\" : \", count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9532b2f4-1278-4d5b-b1bf-7f620a1b61aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most Frequently Rated Genres:\n",
      "Comedy: 356580 ratings\n",
      "Drama: 354529 ratings\n",
      "Action: 257457 ratings\n",
      "Thriller: 189680 ratings\n",
      "Sci-Fi: 157294 ratings\n",
      "Romance: 147523 ratings\n",
      "Adventure: 133953 ratings\n",
      "Crime: 79541 ratings\n",
      "Horror: 76386 ratings\n",
      "Children's: 72186 ratings\n",
      "War: 68527 ratings\n",
      "Animation: 43293 ratings\n",
      "Musical: 41533 ratings\n",
      "Mystery: 40178 ratings\n",
      "Fantasy: 36301 ratings\n",
      "Western: 20683 ratings\n",
      "Film-Noir: 18261 ratings\n",
      "Documentary: 7910 ratings\n",
      "\n",
      "Average Ratings by Genre:\n",
      "Film-Noir: 4.08\n",
      "Documentary: 3.93\n",
      "War: 3.89\n",
      "Drama: 3.77\n",
      "Crime: 3.71\n",
      "Animation: 3.68\n",
      "Mystery: 3.67\n",
      "Musical: 3.67\n",
      "Western: 3.64\n",
      "Romance: 3.61\n",
      "Thriller: 3.57\n",
      "Comedy: 3.52\n",
      "Action: 3.49\n",
      "Adventure: 3.48\n",
      "Sci-Fi: 3.47\n",
      "Fantasy: 3.45\n",
      "Children's: 3.42\n",
      "Horror: 3.22\n"
     ]
    }
   ],
   "source": [
    "# Genre Insights\n",
    "\n",
    "ratings_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\"\n",
    "movies_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat\"\n",
    "\n",
    "genre_rating_count = dict() \n",
    "genre_frequency = dict()     \n",
    "movie_genre_map = dict()     \n",
    "\n",
    "# mapping MovieID to genres\n",
    "with open(movies_file_path, 'r') as movies_file:\n",
    "    for line in movies_file:\n",
    "        line = line.strip()\n",
    "        columns = line.split('::')\n",
    "        movie_id = int(columns[0])\n",
    "        genres = columns[2].split('|')  \n",
    "        movie_genre_map[movie_id] = genres\n",
    "\n",
    "# Agregating MovieID to rating and genre\n",
    "with open(ratings_file_path, 'r') as ratings_file:\n",
    "    for line in ratings_file:\n",
    "        line = line.strip()\n",
    "        columns = list(map(int, line.split('::')))\n",
    "        movie_id = columns[1]\n",
    "        rating = columns[2]\n",
    "\n",
    "        if movie_id in movie_genre_map:\n",
    "            genres = movie_genre_map[movie_id]\n",
    "\n",
    "            for genre in genres:\n",
    "                if genre not in genre_rating_count:\n",
    "                    genre_rating_count[genre] = {'sum': 0, 'count': 0}\n",
    "                genre_rating_count[genre]['sum'] += rating\n",
    "                genre_rating_count[genre]['count'] += 1\n",
    "\n",
    "                if genre not in genre_frequency:\n",
    "                    genre_frequency[genre] = 0\n",
    "                genre_frequency[genre] += 1\n",
    "\n",
    "# average ratings for each genre\n",
    "genre_avg_ratings = {\n",
    "    genre: data['sum'] / data['count']\n",
    "    for genre, data in genre_rating_count.items()\n",
    "}\n",
    "\n",
    "# format\n",
    "print(\"Most Frequently Rated Genres:\")\n",
    "for genre, count in sorted(genre_frequency.items(), key=lambda x: x[1], reverse=True):\n",
    "    print(f\"{genre}: {count} ratings\")\n",
    "\n",
    "print(\"\\nAverage Ratings by Genre:\")\n",
    "for genre, avg_rating in sorted(genre_avg_ratings.items(), key=lambda x: x[1], reverse=True):\n",
    "    print(f\"{genre}: {avg_rating:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ccf27284",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Active Professions based on rating: \n",
      "4:131032 ratings \n",
      "0:130499 ratings \n",
      "7:105425 ratings \n",
      "1:85351 ratings \n",
      "17:72816 ratings \n",
      "20:60397 ratings \n",
      "12:57214 ratings \n",
      "2:50068 ratings \n",
      "14:49109 ratings \n",
      "16:46021 ratings \n",
      "6:37205 ratings \n",
      "3:31623 ratings \n",
      "10:23290 ratings \n",
      "15:22951 ratings \n",
      "5:21850 ratings \n",
      "11:20563 ratings \n",
      "19:14904 ratings \n",
      "13:13754 ratings \n",
      "18:12086 ratings \n",
      "9:11345 ratings \n",
      "8:2706 ratings \n",
      "\n",
      "Average Ratings by Genre and Gender:\n",
      "Drama: M = 3.77, F = 3.77\n",
      "Animation: M = 3.66, F = 3.74\n",
      "Children's: M = 3.36, F = 3.57\n",
      "Musical: M = 3.6, F = 3.81\n",
      "Romance: M = 3.57, F = 3.67\n",
      "Comedy: M = 3.5, F = 3.57\n",
      "Action: M = 3.49, F = 3.49\n",
      "Adventure: M = 3.47, F = 3.51\n",
      "Fantasy: M = 3.43, F = 3.51\n",
      "Sci-Fi: M = 3.47, F = 3.45\n",
      "War: M = 3.89, F = 3.89\n",
      "Thriller: M = 3.57, F = 3.57\n",
      "Crime: M = 3.71, F = 3.69\n",
      "Mystery: M = 3.66, F = 3.69\n",
      "Western: M = 3.66, F = 3.55\n",
      "Horror: M = 3.22, F = 3.2\n",
      "Film-Noir: M = 4.09, F = 4.02\n",
      "Documentary: M = 3.93, F = 3.95\n",
      "\n",
      "Average Ratings by Genre and Age:\n",
      "Drama: {1: 3.79, 56: 3.93, 25: 3.73, 45: 3.78, 50: 3.88, 35: 3.78, 18: 3.72}\n",
      "Animation: {1: 3.48, 25: 3.7, 50: 3.78, 35: 3.74, 45: 3.73, 18: 3.62, 56: 3.76}\n",
      "Children's: {1: 3.24, 25: 3.43, 45: 3.53, 50: 3.56, 35: 3.52, 18: 3.29, 56: 3.62}\n",
      "Musical: {1: 3.57, 25: 3.62, 50: 3.8, 35: 3.72, 45: 3.74, 18: 3.56, 56: 3.89}\n",
      "Romance: {1: 3.62, 56: 3.82, 25: 3.55, 45: 3.69, 50: 3.76, 35: 3.65, 18: 3.53}\n",
      "Comedy: {1: 3.5, 56: 3.65, 25: 3.49, 50: 3.65, 35: 3.56, 45: 3.59, 18: 3.46}\n",
      "Action: {1: 3.51, 56: 3.61, 25: 3.45, 45: 3.53, 50: 3.61, 35: 3.54, 18: 3.45}\n",
      "Adventure: {1: 3.45, 56: 3.65, 25: 3.44, 45: 3.53, 50: 3.63, 35: 3.52, 18: 3.41}\n",
      "Fantasy: {1: 3.32, 56: 3.53, 25: 3.45, 45: 3.53, 50: 3.58, 35: 3.48, 18: 3.35}\n",
      "Sci-Fi: {1: 3.48, 56: 3.5, 25: 3.44, 45: 3.48, 50: 3.56, 35: 3.5, 18: 3.43}\n",
      "War: {1: 3.9, 56: 4.07, 25: 3.84, 45: 3.96, 50: 3.97, 35: 3.9, 18: 3.85}\n",
      "Thriller: {1: 3.55, 56: 3.72, 25: 3.54, 45: 3.64, 50: 3.71, 35: 3.62, 18: 3.49}\n",
      "Crime: {1: 3.71, 56: 3.83, 45: 3.75, 25: 3.68, 50: 3.81, 35: 3.73, 18: 3.67}\n",
      "Mystery: {56: 3.89, 25: 3.61, 35: 3.7, 45: 3.75, 50: 3.89, 18: 3.53, 1: 3.63}\n",
      "Western: {56: 3.79, 25: 3.61, 45: 3.67, 50: 3.74, 35: 3.68, 18: 3.47, 1: 3.58}\n",
      "Horror: {56: 3.25, 25: 3.2, 45: 3.26, 35: 3.28, 50: 3.16, 18: 3.17, 1: 3.25}\n",
      "Film-Noir: {56: 4.13, 25: 4.06, 35: 4.06, 45: 4.11, 50: 4.18, 18: 4.0, 1: 4.15}\n",
      "Documentary: {25: 3.95, 35: 3.95, 50: 3.91, 1: 3.73, 18: 3.87, 56: 3.96, 45: 3.97}\n",
      "\n",
      "Average Ratings by Genre and Occupation:\n",
      "Drama: {10: 3.78, 16: 3.79, 15: 3.84, 7: 3.77, 20: 3.65, 9: 3.79, 1: 3.75, 12: 3.84, 17: 3.8, 0: 3.74, 3: 3.79, 14: 3.79, 4: 3.75, 11: 3.76, 8: 3.63, 19: 3.62, 2: 3.73, 18: 3.74, 5: 3.74, 13: 3.95, 6: 3.87}\n",
      "Animation: {10: 3.46, 15: 3.85, 20: 3.7, 9: 3.8, 12: 3.71, 17: 3.73, 1: 3.69, 7: 3.7, 0: 3.68, 3: 3.82, 16: 3.73, 4: 3.66, 11: 3.73, 8: 3.53, 2: 3.62, 19: 3.4, 18: 3.75, 14: 3.76, 13: 3.55, 6: 3.68, 5: 3.77}\n",
      "Children's: {10: 3.22, 15: 3.59, 7: 3.44, 20: 3.35, 9: 3.67, 12: 3.43, 17: 3.48, 1: 3.46, 0: 3.44, 3: 3.61, 16: 3.46, 4: 3.35, 11: 3.46, 8: 3.23, 2: 3.38, 19: 2.97, 18: 3.4, 14: 3.52, 13: 3.49, 6: 3.49, 5: 3.51}\n",
      "Musical: {10: 3.56, 15: 3.81, 20: 3.67, 9: 3.85, 12: 3.6, 1: 3.7, 7: 3.67, 0: 3.66, 3: 3.86, 16: 3.68, 4: 3.64, 11: 3.71, 8: 3.56, 17: 3.66, 2: 3.61, 19: 3.36, 18: 3.48, 5: 3.64, 14: 3.73, 13: 3.74, 6: 3.65}\n",
      "Romance: {10: 3.62, 16: 3.61, 15: 3.69, 7: 3.62, 20: 3.47, 9: 3.76, 1: 3.61, 12: 3.68, 17: 3.66, 0: 3.57, 3: 3.7, 14: 3.6, 4: 3.56, 11: 3.6, 8: 3.57, 2: 3.59, 19: 3.45, 18: 3.52, 5: 3.56, 13: 3.82, 6: 3.71}\n",
      "Comedy: {10: 3.5, 16: 3.51, 15: 3.69, 20: 3.42, 9: 3.58, 1: 3.52, 12: 3.6, 17: 3.58, 0: 3.49, 7: 3.52, 3: 3.6, 14: 3.55, 4: 3.49, 11: 3.55, 8: 3.48, 19: 3.4, 2: 3.5, 18: 3.45, 5: 3.47, 13: 3.66, 6: 3.59}\n",
      "Action: {10: 3.5, 16: 3.51, 15: 3.56, 7: 3.57, 20: 3.34, 9: 3.6, 1: 3.39, 12: 3.58, 17: 3.57, 0: 3.42, 3: 3.55, 14: 3.53, 4: 3.45, 11: 3.52, 8: 3.45, 19: 3.31, 2: 3.46, 18: 3.48, 5: 3.49, 13: 3.68, 6: 3.56}\n",
      "Adventure: {10: 3.43, 16: 3.51, 15: 3.57, 7: 3.51, 20: 3.35, 9: 3.69, 1: 3.42, 12: 3.56, 17: 3.56, 0: 3.43, 3: 3.56, 14: 3.52, 4: 3.42, 11: 3.47, 8: 3.4, 19: 3.29, 2: 3.44, 18: 3.43, 5: 3.48, 13: 3.65, 6: 3.55}\n",
      "Fantasy: {10: 3.3, 16: 3.49, 15: 3.55, 7: 3.47, 9: 3.61, 17: 3.53, 1: 3.46, 3: 3.47, 0: 3.43, 4: 3.36, 11: 3.51, 8: 3.41, 19: 3.23, 12: 3.5, 2: 3.42, 18: 3.42, 14: 3.6, 13: 3.68, 6: 3.49, 20: 3.34, 5: 3.43}\n",
      "Sci-Fi: {10: 3.44, 16: 3.49, 15: 3.53, 7: 3.5, 20: 3.39, 9: 3.49, 1: 3.4, 12: 3.56, 17: 3.53, 0: 3.4, 3: 3.56, 14: 3.49, 4: 3.42, 11: 3.48, 8: 3.41, 19: 3.33, 2: 3.5, 18: 3.47, 5: 3.45, 13: 3.54, 6: 3.47}\n",
      "War: {10: 3.88, 16: 3.93, 15: 3.93, 7: 3.91, 20: 3.8, 9: 3.88, 1: 3.88, 12: 3.94, 17: 3.94, 0: 3.85, 3: 3.93, 14: 3.91, 4: 3.86, 11: 3.95, 8: 3.78, 2: 3.86, 19: 3.69, 18: 3.87, 5: 3.76, 13: 4.09, 6: 4.01}\n",
      "Thriller: {10: 3.55, 16: 3.57, 15: 3.66, 7: 3.63, 20: 3.46, 9: 3.66, 1: 3.53, 12: 3.67, 17: 3.62, 0: 3.49, 3: 3.65, 14: 3.62, 4: 3.51, 11: 3.62, 8: 3.45, 19: 3.4, 2: 3.56, 18: 3.57, 5: 3.54, 13: 3.8, 6: 3.65}\n",
      "Crime: {10: 3.69, 16: 3.74, 7: 3.74, 20: 3.65, 9: 3.64, 1: 3.66, 12: 3.77, 17: 3.71, 0: 3.65, 3: 3.74, 14: 3.73, 15: 3.8, 4: 3.72, 11: 3.73, 8: 3.58, 2: 3.68, 19: 3.63, 5: 3.7, 13: 3.83, 18: 3.64, 6: 3.8}\n",
      "Mystery: {16: 3.7, 15: 3.76, 20: 3.61, 1: 3.69, 12: 3.75, 17: 3.67, 0: 3.59, 7: 3.68, 3: 3.75, 10: 3.64, 14: 3.69, 4: 3.58, 11: 3.74, 9: 3.66, 8: 3.49, 19: 3.58, 2: 3.72, 13: 3.95, 18: 3.63, 6: 3.78, 5: 3.62}\n",
      "Western: {16: 3.61, 15: 3.82, 7: 3.64, 20: 3.62, 9: 3.5, 12: 3.77, 17: 3.66, 1: 3.63, 0: 3.62, 3: 3.63, 10: 3.51, 4: 3.52, 11: 3.67, 8: 3.71, 2: 3.61, 5: 3.61, 14: 3.7, 13: 3.77, 19: 3.5, 18: 3.75, 6: 3.74}\n",
      "Horror: {16: 3.27, 15: 3.34, 7: 3.22, 20: 3.2, 1: 3.1, 12: 3.35, 17: 3.21, 0: 3.13, 3: 3.3, 10: 3.24, 14: 3.32, 4: 3.17, 11: 3.24, 9: 3.27, 8: 3.01, 19: 3.14, 2: 3.24, 18: 3.34, 5: 3.28, 13: 3.33, 6: 3.26}\n",
      "Film-Noir: {16: 4.11, 20: 4.1, 17: 4.05, 1: 4.08, 12: 4.13, 7: 4.03, 0: 4.06, 3: 4.08, 10: 4.21, 14: 4.13, 15: 4.19, 4: 4.04, 11: 4.15, 8: 3.88, 2: 4.11, 5: 4.03, 13: 4.16, 19: 4.04, 18: 3.88, 9: 3.68, 6: 4.01}\n",
      "Documentary: {20: 3.97, 17: 4.02, 1: 3.98, 10: 3.58, 15: 3.99, 0: 3.85, 7: 3.92, 4: 3.96, 3: 3.85, 8: 3.9, 19: 3.73, 12: 3.84, 2: 4.03, 14: 3.92, 18: 3.64, 16: 3.93, 5: 3.89, 13: 3.97, 11: 4.14, 9: 3.8, 6: 4.01}\n"
     ]
    }
   ],
   "source": [
    "# User Engagement Analysis\n",
    "#1)Identify the most active users (profession) based on the number of ratings theyâ€™ve given.\n",
    "User_info = open(r\"C:\\Users\\kamle\\Desktop\\ml-1m\\users.dat\")\n",
    "ratings_file= open(r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\")\n",
    "\n",
    "user_rating_count=dict()\n",
    "user_profession=dict()\n",
    "profession_rating=dict()\n",
    "\n",
    "for line in ratings_file:\n",
    "    line=line.strip()\n",
    "    column=list(map(int,line.split(\"::\")))\n",
    "    user_id=column[0]\n",
    "    \n",
    "    if(user_id not in user_rating_count):\n",
    "        user_rating_count[user_id]=0\n",
    "    user_rating_count[user_id]+=1\n",
    "    \n",
    "for line in User_info:\n",
    "    line=line.strip()\n",
    "    column=line.split('::')\n",
    "    user_id=int(column[0])\n",
    "    profession=column[3]\n",
    "    user_profession[user_id]=profession\n",
    "    \n",
    "for user_id,rating in user_rating_count.items():\n",
    "    if user_id in user_profession:\n",
    "        profession=user_profession[user_id]\n",
    "        if profession not in profession_rating:\n",
    "            profession_rating[profession]=0\n",
    "        profession_rating[profession]+=rating\n",
    "\n",
    "print(\"Active Professions based on rating: \")\n",
    "sorted_p=sorted(profession_rating.items(),key=lambda x : x[1],reverse=True)\n",
    "for profession_nm ,rating_t in sorted_p:\n",
    "    print(f'{profession_nm}:{rating_t} ratings ')\n",
    "        \n",
    "#Analyze the relationship between user demographic attributes (age, gender, occupation) and their movie preferences or rating patterns.    \n",
    "    \n",
    "    # File paths\n",
    "users_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\users.dat\"\n",
    "ratings_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\"\n",
    "movies_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat\"\n",
    "\n",
    "# Initialize dictionaries to store data\n",
    "user_data = {}  # {UserID: {\"Gender\": ..., \"Age\": ..., \"Occupation\": ...}}\n",
    "movie_genres = {}  # {MovieID: [Genre1, Genre2, ...]}\n",
    "genre_stats_by_gender = {}  # {Genre: {\"M\": {\"Total_Ratings\": ..., \"Sum_Ratings\": ...}, \"F\": {...}}}\n",
    "genre_stats_by_age = {}  # {Genre: {Age: {\"Total_Ratings\": ..., \"Sum_Ratings\": ...}}}\n",
    "genre_stats_by_occupation = {}  # {Genre: {Occupation: {\"Total_Ratings\": ..., \"Sum_Ratings\": ...}}}\n",
    "\n",
    "with open(users_file_path, \"r\") as users_file:\n",
    "    for line in users_file:\n",
    "        user_id, gender, age, occupation, _ = line.strip().split(\"::\")\n",
    "        user_data[int(user_id)] = {\"Gender\": gender, \"Age\": int(age), \"Occupation\": int(occupation)}\n",
    "\n",
    "with open(movies_file_path, \"r\") as movies_file:\n",
    "    for line in movies_file:\n",
    "        movie_id, _, genres = line.strip().split(\"::\")\n",
    "        movie_genres[int(movie_id)] = genres.split(\"|\")\n",
    "\n",
    "with open(ratings_file_path, \"r\") as ratings_file:\n",
    "    for line in ratings_file:\n",
    "        user_id, movie_id, rating, _ = map(int, line.strip().split(\"::\"))\n",
    "        user_info = user_data[user_id]\n",
    "        movie_id = int(movie_id)\n",
    "        rating = int(rating)\n",
    "\n",
    "        gender = user_info[\"Gender\"]\n",
    "        age = user_info[\"Age\"]\n",
    "        occupation = user_info[\"Occupation\"]\n",
    "\n",
    "        genres = movie_genres[movie_id]\n",
    "\n",
    "        for genre in genres:\n",
    "            #by gender\n",
    "            if genre not in genre_stats_by_gender:\n",
    "                genre_stats_by_gender[genre] = {\"M\": {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}, \n",
    "                                                \"F\": {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}}\n",
    "            genre_stats_by_gender[genre][gender][\"Total_Ratings\"] += 1\n",
    "            genre_stats_by_gender[genre][gender][\"Sum_Ratings\"] += rating\n",
    "\n",
    "            # By Age\n",
    "            if genre not in genre_stats_by_age:\n",
    "                genre_stats_by_age[genre] = {}\n",
    "            if age not in genre_stats_by_age[genre]:\n",
    "                genre_stats_by_age[genre][age] = {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}\n",
    "            genre_stats_by_age[genre][age][\"Total_Ratings\"] += 1\n",
    "            genre_stats_by_age[genre][age][\"Sum_Ratings\"] += rating\n",
    "\n",
    "            # By Occupation\n",
    "            if genre not in genre_stats_by_occupation:\n",
    "                genre_stats_by_occupation[genre] = {}\n",
    "            if occupation not in genre_stats_by_occupation[genre]:\n",
    "                genre_stats_by_occupation[genre][occupation] = {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}\n",
    "            genre_stats_by_occupation[genre][occupation][\"Total_Ratings\"] += 1\n",
    "            genre_stats_by_occupation[genre][occupation][\"Sum_Ratings\"] += rating\n",
    "\n",
    "# average ratings\n",
    "def average_ratings(stats):\n",
    "    averages = {}\n",
    "    for key, sub_stats in stats.items():\n",
    "        averages[key] = {sub_key: round(sub_data[\"Sum_Ratings\"] / sub_data[\"Total_Ratings\"], 2) \n",
    "                         for sub_key, sub_data in sub_stats.items() if sub_data[\"Total_Ratings\"] > 0}\n",
    "    return averages\n",
    "\n",
    "average_ratings_by_gender = average_ratings(genre_stats_by_gender)\n",
    "average_ratings_by_age = average_ratings(genre_stats_by_age)\n",
    "average_ratings_by_occupation = average_ratings(genre_stats_by_occupation)\n",
    "\n",
    "# format\n",
    "print()\n",
    "print(\"Average Ratings by Genre and Gender:\")\n",
    "for genre, stats in average_ratings_by_gender.items():\n",
    "    print(f\"{genre}: M = {stats.get('M', 0)}, F = {stats.get('F', 0)}\")\n",
    "\n",
    "print(\"\\nAverage Ratings by Genre and Age:\")\n",
    "for genre, stats in average_ratings_by_age.items():\n",
    "    print(f\"{genre}: {stats}\")\n",
    "\n",
    "print(\"\\nAverage Ratings by Genre and Occupation:\")\n",
    "for genre, stats in average_ratings_by_occupation.items():\n",
    "    print(f\"{genre}: {stats}\")\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dafac9c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "According to age preferences of genre\n",
      "Under 18 : Comedy\n",
      "18-24 : Comedy\n",
      "25-34 : Comedy\n",
      "35-44 : Drama\n",
      "45-49 : Drama\n",
      "50-55 : Drama\n",
      "56+ : Drama\n",
      "\n",
      "According to occupation preferences of genre\n",
      "other or not specified : Comedy\n",
      "academic/educator : Drama\n",
      "artist : Drama\n",
      "clerical/admin : Comedy\n",
      "college/grad student : Comedy\n",
      "customer service : Comedy\n",
      "doctor/health care : Drama\n",
      "executive/managerial : Drama\n",
      "farmer : Comedy\n",
      "homemaker : Comedy\n",
      "K-12 student : Comedy\n",
      "lawyer : Drama\n",
      "programmer : Comedy\n",
      "retired : Drama\n",
      "sales/marketing : Comedy\n",
      "scientist : Drama\n",
      "self-employed : Drama\n",
      "technician/engineer : Comedy\n",
      "tradesman/craftsman : Comedy\n",
      "unemployed : Comedy\n",
      "writer : Drama\n"
     ]
    }
   ],
   "source": [
    "# 4) Rating Distribution by Demographics\n",
    "\n",
    "user_file = open(r'C:\\Users\\kamle\\Desktop\\ml-1m\\users.dat')\n",
    "movies_file = open(r'C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat')\n",
    "rating_file = open(r'C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat')\n",
    "\n",
    "user = dict()\n",
    "for line in user_file:\n",
    "    line = line.strip()\n",
    "    columns = line.split('::')\n",
    "    user[int(columns[0])] = {'age' : int(columns[2]), 'occupation' : int(columns[3])}\n",
    "\n",
    "movie_genre = dict()\n",
    "for line in movies_file:\n",
    "    line = line.strip()\n",
    "    columns = line.split('::')\n",
    "    genre_list = columns[2].split('|')\n",
    "    movie_genre[int(columns[0])] = genre_list\n",
    "\n",
    "agegroup = {\n",
    "    1: \"Under 18\",\n",
    "    18: \"18-24\",\n",
    "    25: \"25-34\",\n",
    "    35: \"35-44\",\n",
    "    45: \"45-49\",\n",
    "    50: \"50-55\",\n",
    "    56: \"56+\"\n",
    "}\n",
    "\n",
    "occupations_name = {0: \"other or not specified\",\n",
    "               1: \"academic/educator\",\n",
    "               2: \"artist\",\n",
    "               3: \"clerical/admin\",\n",
    "               4: \"college/grad student\",\n",
    "               5: \"customer service\",\n",
    "               6: \"doctor/health care\",\n",
    "               7: \"executive/managerial\",\n",
    "               8: \"farmer\",\n",
    "               9: \"homemaker\",\n",
    "               10: \"K-12 student\",\n",
    "               11: \"lawyer\",\n",
    "               12: \"programmer\",\n",
    "               13: \"retired\",\n",
    "               14: \"sales/marketing\",\n",
    "               15: \"scientist\",\n",
    "               16: \"self-employed\",\n",
    "               17: \"technician/engineer\",\n",
    "               18: \"tradesman/craftsman\",\n",
    "               19: \"unemployed\",\n",
    "               20: \"writer\"\n",
    "              }\n",
    "age_group_preferences = {}\n",
    "occupation_preferences = {}\n",
    "\n",
    "for line in rating_file:\n",
    "    line = line.strip()\n",
    "    columns = list(map(int, line.split(\"::\")))\n",
    "    user_id = columns[0]\n",
    "    movie_id = columns[1]\n",
    "    rating = columns[2]\n",
    "\n",
    "    if (user_id in user) and (movie_id in movie_genre):\n",
    "        user_data = user[user_id]\n",
    "        genres = movie_genre[movie_id]\n",
    "\n",
    "        age = user_data['age']\n",
    "        if age not in age_group_preferences:\n",
    "            age_group_preferences[age] = {}\n",
    "\n",
    "        for genre in genres:\n",
    "            if genre in age_group_preferences[age]:\n",
    "                age_group_preferences[age][genre] +=1\n",
    "            else:\n",
    "                age_group_preferences[age][genre] =1\n",
    "\n",
    "        occupation = user_data['occupation']\n",
    "        if occupation not in occupation_preferences:\n",
    "            occupation_preferences[occupation] = {}\n",
    "\n",
    "        for genre in genres:\n",
    "            if genre in occupation_preferences[occupation]:\n",
    "                occupation_preferences[occupation][genre] +=1\n",
    "            else:\n",
    "                occupation_preferences[occupation][genre] =1\n",
    "\n",
    "\n",
    "preference_by_age = sorted(age_group_preferences.items(), key = lambda x : x[0])\n",
    "print(\"According to age preferences of genre\")\n",
    "for age in preference_by_age:\n",
    "    print(agegroup.get(age[0]),\":\",end =' ')\n",
    "    genre = max(age[1].items(), key = lambda x : x[1])\n",
    "    print(genre[0])\n",
    "\n",
    "preference_by_occupation = sorted(occupation_preferences.items(), key = lambda x : x[0])\n",
    "print(\"\\nAccording to occupation preferences of genre\")\n",
    "for occupation in preference_by_occupation:\n",
    "    print(occupations_name.get(occupation[0]),\":\",end =' ')\n",
    "    genre = max(occupation[1].items(), key = lambda x : x[1])\n",
    "    print(genre[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cccf584e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top-Rated Movies (Minimum Ratings Threshold = 50):\n",
      "Rank  Title                                    Avg Rating Year     Genres\n",
      "1     Sanjuro                                  4.61       1962     Action, Adventure\n",
      "2     Seven Samurai (The Magnificent Seven) (Shichinin no samurai) 4.56       1954     Action, Drama\n",
      "3     Shawshank Redemption, The                4.55       1994     Drama\n",
      "4     Close Shave, A                           4.52       1995     Animation, Comedy, Thriller\n",
      "5     Usual Suspects, The                      4.52       1995     Crime, Thriller\n",
      "6     Godfather, The                           4.52       1972     Action, Crime, Drama\n",
      "7     Schindler's List                         4.51       1993     Drama, War\n",
      "8     Wrong Trousers, The                      4.51       1993     Animation, Comedy\n",
      "9     Sunset Blvd. (a.k.a. Sunset Boulevard)   4.49       1950     Film-Noir\n",
      "10    Raiders of the Lost Ark                  4.48       1981     Action, Adventure\n"
     ]
    }
   ],
   "source": [
    "#5) Identify the movies with the highest average ratings (considering a minimum number of ratings for fairness).Analyze the characteristics of top-rated movies (e.g., release year, genres).\n",
    "# File paths\n",
    "movies_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat\"\n",
    "ratings_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\"\n",
    "\n",
    "movie_ratings = {}  \n",
    "movie_details = {}  \n",
    "\n",
    "min_ratings_threshold = 50\n",
    "\n",
    "with open(movies_file_path, \"r\") as movies_file:\n",
    "    for line in movies_file:\n",
    "        movie_id, title, genres = line.strip().split(\"::\")\n",
    "        movie_id = int(movie_id)\n",
    "\n",
    "        if \"(\" in title and \")\" in title:\n",
    "            year = int(title.strip()[-5:-1]) if title.strip()[-5:-1].isdigit() else None\n",
    "            title = title[:-6].strip()  # Remove year from title\n",
    "        else:\n",
    "            year = None\n",
    "\n",
    "        movie_details[movie_id] = {\"Title\": title, \"Year\": year, \"Genres\": genres.split(\"|\")}\n",
    "\n",
    "with open(ratings_file_path, \"r\") as ratings_file:\n",
    "    for line in ratings_file:\n",
    "        _, movie_id, rating, _ = map(int, line.strip().split(\"::\"))\n",
    "        if movie_id not in movie_ratings:\n",
    "            movie_ratings[movie_id] = {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}\n",
    "        movie_ratings[movie_id][\"Total_Ratings\"] += 1\n",
    "        movie_ratings[movie_id][\"Sum_Ratings\"] += rating\n",
    "\n",
    "movie_avg_ratings = []\n",
    "for movie_id, stats in movie_ratings.items():\n",
    "    total_ratings = stats[\"Total_Ratings\"]\n",
    "    sum_ratings = stats[\"Sum_Ratings\"]\n",
    "    if total_ratings >= min_ratings_threshold:\n",
    "        avg_rating = round(sum_ratings / total_ratings, 2)\n",
    "        movie_avg_ratings.append((movie_id, avg_rating, total_ratings))\n",
    "\n",
    "# Sort Movies by Average Rating\n",
    "movie_avg_ratings.sort(key=lambda x: x[1], reverse=True)\n",
    "\n",
    "# Analyze Top-Rated Movies\n",
    "print(\"Top-Rated Movies (Minimum Ratings Threshold = 50):\")\n",
    "print(\"{:<5} {:<40} {:<10} {:<8} {}\".format(\"Rank\", \"Title\", \"Avg Rating\", \"Year\", \"Genres\"))\n",
    "\n",
    "for rank, (movie_id, avg_rating, total_ratings) in enumerate(movie_avg_ratings[:10], start=1):\n",
    "    movie = movie_details[movie_id]\n",
    "    title = movie[\"Title\"]\n",
    "    year = movie[\"Year\"] if movie[\"Year\"] else \"Unknown\"\n",
    "    genres = \", \".join(movie[\"Genres\"])\n",
    "    print(f\"{rank:<5} {title:<40} {avg_rating:<10} {year:<8} {genres}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce56694b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Long Tail Movies (<= 5 Ratings):\n",
      "Number of Long Tail Movies: 329\n",
      "Most Common Genres: {'Drama': 176, 'Comedy': 82, 'Documentary': 29, 'Thriller': 23, 'Horror': 20}\n",
      "Most Common Release Years: {1995: 47, 1998: 41, 1996: 35, 1997: 30, 1994: 29}\n",
      "\n",
      "Popular Movies (> 5 Ratings):\n",
      "Number of Popular Movies: 3377\n",
      "Most Common Genres: {'Drama': 1317, 'Comedy': 1081, 'Action': 475, 'Thriller': 462, 'Romance': 439}\n",
      "Most Common Release Years: {1996: 277, 1998: 276, 1997: 274, 1995: 265, 1999: 250}\n"
     ]
    }
   ],
   "source": [
    "#6) Exploring Long Tail Investigate the \"long tail\" of the dataset: How many movies receive very few ratings? What are the characteristics of these less-rated movies compared to popular ones?\n",
    "# File paths\n",
    "movies_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat\"\n",
    "ratings_file_path = r\"C:\\Users\\kamle\\Desktop\\ml-1m\\ratings.dat\"\n",
    "\n",
    "movie_ratings = {}  \n",
    "movie_details = {}  \n",
    "\n",
    "with open(movies_file_path, \"r\") as movies_file:\n",
    "    for line in movies_file:\n",
    "        movie_id, title, genres = line.strip().split(\"::\")\n",
    "        movie_id = int(movie_id)\n",
    "\n",
    "        # Extract release year from title\n",
    "        if \"(\" in title and \")\" in title:\n",
    "            year = int(title.strip()[-5:-1]) if title.strip()[-5:-1].isdigit() else None\n",
    "            title = title[:-6].strip()  # Remove year from title\n",
    "        else:\n",
    "            year = None\n",
    "\n",
    "        movie_details[movie_id] = {\"Title\": title, \"Year\": year, \"Genres\": genres.split(\"|\")}\n",
    "\n",
    "with open(ratings_file_path, \"r\") as ratings_file:\n",
    "    for line in ratings_file:\n",
    "        _, movie_id, rating, _ = map(int, line.strip().split(\"::\"))\n",
    "        if movie_id not in movie_ratings:\n",
    "            movie_ratings[movie_id] = {\"Total_Ratings\": 0, \"Sum_Ratings\": 0}\n",
    "        movie_ratings[movie_id][\"Total_Ratings\"] += 1\n",
    "        movie_ratings[movie_id][\"Sum_Ratings\"] += rating\n",
    "\n",
    "low_rating_threshold = 5  \n",
    "long_tail_movies = []\n",
    "popular_movies = []\n",
    "\n",
    "for movie_id, stats in movie_ratings.items():\n",
    "    total_ratings = stats[\"Total_Ratings\"]\n",
    "    if total_ratings <= low_rating_threshold:\n",
    "        long_tail_movies.append(movie_id)\n",
    "    else:\n",
    "        popular_movies.append(movie_id)\n",
    "\n",
    "def analyze_movie_characteristics(movie_ids):\n",
    "    genre_count = {}\n",
    "    year_count = {}\n",
    "    for movie_id in movie_ids:\n",
    "        movie = movie_details[movie_id]\n",
    "        genres = movie[\"Genres\"]\n",
    "        year = movie[\"Year\"]\n",
    "\n",
    "        # Count genres\n",
    "        for genre in genres:\n",
    "            genre_count[genre] = genre_count.get(genre, 0) + 1\n",
    "\n",
    "        # Count release years\n",
    "        if year:\n",
    "            year_count[year] = year_count.get(year, 0) + 1\n",
    "\n",
    "    return genre_count, year_count\n",
    "\n",
    "long_tail_genres, long_tail_years = analyze_movie_characteristics(long_tail_movies)\n",
    "\n",
    "popular_genres, popular_years = analyze_movie_characteristics(popular_movies)\n",
    "\n",
    "# format\n",
    "print(\"Long Tail Movies (<= 5 Ratings):\")\n",
    "print(f\"Number of Long Tail Movies: {len(long_tail_movies)}\")\n",
    "print(f\"Most Common Genres: {dict(sorted(long_tail_genres.items(), key=lambda x: x[1], reverse=True)[:5])}\")\n",
    "print(f\"Most Common Release Years: {dict(sorted(long_tail_years.items(), key=lambda x: x[1], reverse=True)[:5])}\\n\")\n",
    "\n",
    "print(\"Popular Movies (> 5 Ratings):\")\n",
    "print(f\"Number of Popular Movies: {len(popular_movies)}\")\n",
    "print(f\"Most Common Genres: {dict(sorted(popular_genres.items(), key=lambda x: x[1], reverse=True)[:5])}\")\n",
    "print(f\"Most Common Release Years: {dict(sorted(popular_years.items(), key=lambda x: x[1], reverse=True)[:5])}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fdf218b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Frequently Used Tags here tags are Genres:\n",
      "Drama: 1603\n",
      "Comedy: 1200\n",
      "Action: 503\n",
      "Thriller: 492\n",
      "Romance: 471\n",
      "Horror: 343\n",
      "Adventure: 283\n",
      "Sci-Fi: 276\n",
      "Children's: 251\n",
      "Crime: 211\n",
      "War: 143\n",
      "Documentary: 127\n",
      "Musical: 114\n",
      "Mystery: 106\n",
      "Animation: 105\n",
      "Fantasy: 68\n",
      "Western: 68\n",
      "Film-Noir: 44\n"
     ]
    }
   ],
   "source": [
    "# 7. Tag Analysis\n",
    "\n",
    "# Analyze the tags associated with movies. What are the most frequently used tags?\n",
    "\n",
    "tag_analysis = {}\n",
    "\n",
    "file = open(r'C:\\Users\\kamle\\Desktop\\ml-1m\\movies.dat')\n",
    "for line in file:\n",
    "    all_gen = line.strip().split(\"::\")\n",
    "    genres = all_gen[2]\n",
    "    tags = genres.split(\"|\")\n",
    "    for tag in tags:\n",
    "        if tag not  in tag_analysis:\n",
    "            tag_analysis[tag] = 1\n",
    "        else:\n",
    "            tag_analysis[tag] += 1\n",
    "sorted_tag = sorted(tag_analysis.items(), key=lambda x: x[1], reverse=True)\n",
    "print(\"Frequently Used Tags here tags are Genres:\")\n",
    "\n",
    "for tag, count in sorted_tag:\n",
    "    print(f\"{tag}: {count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8d76f444",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 768x793 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 768x793 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Initialize the Tkinter window\n",
    "root = tk.Tk()\n",
    "root.title(\"Movie Ratings Dashboard\")\n",
    "\n",
    "# Set the size of the window\n",
    "root.geometry(\"1200x800\")\n",
    "\n",
    "# Create the first figure: Pie Chart for Rating Distribution\n",
    "fig1, ax1 = plt.subplots(figsize=(6, 4))\n",
    "ax1.pie(\n",
    "    rating_distribution.values(),\n",
    "    labels=rating_distribution.keys(),\n",
    "    autopct=\"%1.1f%%\",\n",
    "    startangle=90,\n",
    "    colors=[\"#4CAF50\", \"#FFC107\", \"#F44336\"],\n",
    ")\n",
    "ax1.set_title(\"Rating Distribution\")\n",
    "ax1.axis(\"equal\")  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "# Embed the Pie Chart in Tkinter\n",
    "canvas1 = FigureCanvasTkAgg(fig1, master=root)\n",
    "canvas1.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Create the second figure: Bar Chart for Most Rated Movies\n",
    "fig2, ax2 = plt.subplots(figsize=(6, 4))\n",
    "movies = list(movieId_count.keys())\n",
    "ratings = list(movieId_count.values())\n",
    "ax2.barh(movies[::-1], ratings[::-1], color=\"skyblue\")  # Reverse for descending order\n",
    "ax2.set_xlabel(\"Number of Ratings\")\n",
    "ax2.set_ylabel(\"Movies\")\n",
    "ax2.set_title(\"Top 10 Most Rated Movies\")\n",
    "\n",
    "# Embed the Bar Chart in Tkinter\n",
    "canvas2 = FigureCanvasTkAgg(fig2, master=root)\n",
    "canvas2.get_tk_widget().pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Run the Tkinter main loop\n",
    "root.mainloop()\n",
    "\n",
    "# 2)\n",
    "import tkinter as tk\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Mock data (replace with actual data from your calculations)\n",
    "genre_frequency = {\n",
    "    \"Drama\": 2500,\n",
    "    \"Comedy\": 2000,\n",
    "    \"Action\": 1800,\n",
    "    \"Thriller\": 1500,\n",
    "    \"Romance\": 1400,\n",
    "    \"Horror\": 800,\n",
    "    \"Sci-Fi\": 700,\n",
    "}\n",
    "genre_avg_ratings = {\n",
    "    \"Drama\": 4.2,\n",
    "    \"Comedy\": 3.9,\n",
    "    \"Action\": 4.0,\n",
    "    \"Thriller\": 3.8,\n",
    "    \"Romance\": 4.1,\n",
    "    \"Horror\": 3.5,\n",
    "    \"Sci-Fi\": 4.3,\n",
    "}\n",
    "\n",
    "# Initialize the Tkinter window\n",
    "root = tk.Tk()\n",
    "root.title(\"Genre Ratings Dashboard\")\n",
    "\n",
    "# Set the size of the window\n",
    "root.geometry(\"1200x800\")\n",
    "\n",
    "# Create the first figure: Bar Chart for Genre Frequency\n",
    "fig1, ax1 = plt.subplots(figsize=(6, 4))\n",
    "genres = list(genre_frequency.keys())\n",
    "frequencies = list(genre_frequency.values())\n",
    "ax1.bar(genres, frequencies, color=\"skyblue\")\n",
    "ax1.set_xlabel(\"Genres\")\n",
    "ax1.set_ylabel(\"Number of Ratings\")\n",
    "ax1.set_title(\"Most Frequently Rated Genres\")\n",
    "ax1.tick_params(axis=\"x\", rotation=45)\n",
    "\n",
    "# Embed the Genre Frequency Bar Chart in Tkinter\n",
    "canvas1 = FigureCanvasTkAgg(fig1, master=root)\n",
    "canvas1.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Create the second figure: Bar Chart for Average Ratings by Genre\n",
    "fig2, ax2 = plt.subplots(figsize=(6, 4))\n",
    "genres_avg = list(genre_avg_ratings.keys())\n",
    "avg_ratings = list(genre_avg_ratings.values())\n",
    "ax2.bar(genres_avg, avg_ratings, color=\"orange\")\n",
    "ax2.set_xlabel(\"Genres\")\n",
    "ax2.set_ylabel(\"Average Rating\")\n",
    "ax2.set_title(\"Average Ratings by Genre\")\n",
    "ax2.tick_params(axis=\"x\", rotation=45)\n",
    "ax2.set_ylim(0, 5)  # Ratings range from 0 to 5\n",
    "\n",
    "# Embed the Average Ratings Bar Chart in Tkinter\n",
    "canvas2 = FigureCanvasTkAgg(fig2, master=root)\n",
    "canvas2.get_tk_widget().pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n",
    "\n",
    "# Run the Tkinter main loop\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "763693b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-26 20:22:27.225 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.396 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.397 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.443 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.596 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.598 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.600 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.600 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.656 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.954 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.955 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.957 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:27.958 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.014 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.270 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.271 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.273 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.274 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.309 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.594 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-26 20:22:28.595 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Mock data (replace with actual data)\n",
    "rating_distribution = {\"High\": 60, \"Medium\": 30, \"Low\": 10}\n",
    "movieId_count = {\n",
    "    \"Movie A\": 500,\n",
    "    \"Movie B\": 450,\n",
    "    \"Movie C\": 400,\n",
    "    \"Movie D\": 350,\n",
    "    \"Movie E\": 300,\n",
    "    \"Movie F\": 250,\n",
    "    \"Movie G\": 200,\n",
    "    \"Movie H\": 150,\n",
    "    \"Movie I\": 100,\n",
    "    \"Movie J\": 50,\n",
    "}\n",
    "genre_frequency = {\n",
    "    \"Drama\": 2500,\n",
    "    \"Comedy\": 2000,\n",
    "    \"Action\": 1800,\n",
    "    \"Thriller\": 1500,\n",
    "    \"Romance\": 1400,\n",
    "    \"Horror\": 800,\n",
    "    \"Sci-Fi\": 700,\n",
    "}\n",
    "genre_avg_ratings = {\n",
    "    \"Drama\": 4.2,\n",
    "    \"Comedy\": 3.9,\n",
    "    \"Action\": 4.0,\n",
    "    \"Thriller\": 3.8,\n",
    "    \"Romance\": 4.1,\n",
    "    \"Horror\": 3.5,\n",
    "    \"Sci-Fi\": 4.3,\n",
    "}\n",
    "\n",
    "# Streamlit App Title\n",
    "st.title(\"Movie Ratings and Genres Dashboard\")\n",
    "\n",
    "# Rating Distribution Pie Chart\n",
    "st.subheader(\"Rating Distribution\")\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(\n",
    "    rating_distribution.values(),\n",
    "    labels=rating_distribution.keys(),\n",
    "    autopct=\"%1.1f%%\",\n",
    "    startangle=90,\n",
    "    colors=[\"#4CAF50\", \"#FFC107\", \"#F44336\"],\n",
    ")\n",
    "ax1.set_title(\"Rating Distribution\")\n",
    "ax1.axis(\"equal\")\n",
    "st.pyplot(fig1)\n",
    "\n",
    "# Most Rated Movies Bar Chart\n",
    "st.subheader(\"Top 10 Most Rated Movies\")\n",
    "fig2, ax2 = plt.subplots()\n",
    "movies = list(movieId_count.keys())\n",
    "ratings = list(movieId_count.values())\n",
    "ax2.barh(movies[::-1], ratings[::-1], color=\"skyblue\")  # Reverse for descending order\n",
    "ax2.set_xlabel(\"Number of Ratings\")\n",
    "ax2.set_ylabel(\"Movies\")\n",
    "ax2.set_title(\"Top 10 Most Rated Movies\")\n",
    "st.pyplot(fig2)\n",
    "\n",
    "# Genre Frequency Bar Chart\n",
    "st.subheader(\"Most Frequently Rated Genres\")\n",
    "fig3, ax3 = plt.subplots()\n",
    "genres = list(genre_frequency.keys())\n",
    "frequencies = list(genre_frequency.values())\n",
    "ax3.bar(genres, frequencies, color=\"skyblue\")\n",
    "ax3.set_xlabel(\"Genres\")\n",
    "ax3.set_ylabel(\"Number of Ratings\")\n",
    "ax3.set_title(\"Most Frequently Rated Genres\")\n",
    "ax3.tick_params(axis=\"x\", rotation=45)\n",
    "st.pyplot(fig3)\n",
    "\n",
    "# Average Ratings by Genre Bar Chart\n",
    "st.subheader(\"Average Ratings by Genre\")\n",
    "fig4, ax4 = plt.subplots()\n",
    "genres_avg = list(genre_avg_ratings.keys())\n",
    "avg_ratings = list(genre_avg_ratings.values())\n",
    "ax4.bar(genres_avg, avg_ratings, color=\"orange\")\n",
    "ax4.set_xlabel(\"Genres\")\n",
    "ax4.set_ylabel(\"Average Rating\")\n",
    "ax4.set_title(\"Average Ratings by Genre\")\n",
    "ax4.tick_params(axis=\"x\", rotation=45)\n",
    "ax4.set_ylim(0, 5)  # Ratings range from 0 to 5\n",
    "st.pyplot(fig4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "5da2364f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
